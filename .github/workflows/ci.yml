name: CI
on:
  pull_request:
    types:
      - opened
      - synchronize
  push:
    branches:
      - main
      - feature/*
  workflow_dispatch:

env:
  CLICOLOR_FORCE: 1
  RUST_BACKTRACE: all

jobs:
  ci:
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust: [stable]
        #, beta, nightly, 1.56.0
        os: [ubuntu-latest]
        #, windows-latest, macOS-latest]
        make:
          - name: format
            task: format
          - name: lint
            task: clippy
          #- name: audit
          #  task: audit
          - name: build
            task: ci-flow
          - name: coverage
            task: coverage-flow
          - name: codecov
            task: codecov-flow
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
          key: ${{ runner.os }}-cargo-${{ steps.rust_toolchain.outputs.rustc_hash }}-${{ hashFiles('./Cargo.toml') }}

      - name: Cache Rust
        uses: actions/cache@v3
        with:
          path: |
            ./target
            ./snmp-sim-cli/target
          key: ${{ runner.os }}-rust-snmp_sim-${{ steps.rust_toolchain.outputs.rustc_hash }}-${{ hashFiles('./Cargo.toml') }}

      - name: Cache OpenAPI Generator
        uses: actions/cache@v3
        with:
          path: |
            ~/bin/openapitools/
          key: ${{ runner.os }}-openapi-generator-${{ steps.rust_toolchain.outputs.rustc_hash }}-${{ hashFiles('~/bin/openapitools/openapi-generator') }}

      - name: Install rust
        if: matrix.make.name != 'format'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          components: clippy

      - name: Install nightly rust with formatter
        if: matrix.make.task == 'format'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: rustfmt

      # - name: Install LLVM tools
      #   run: cargo make install-llvm-tools

      - name: Install cargo-make
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-make

      - name: Install OpenAPI Generator
        if: matrix.os == 'ubuntu-latest'
        uses: actions-rs/cargo@v1
        with:
          command: make
          args: install-openapi

      - name: Run CI
        if: matrix.rust == 'stable' || matrix.rust == 'beta'
        run: |
          for task in ${{ matrix.make.task }} ; do
            cargo make ${task}
          done

      - name: Run CI (Allow Failures)
        if: matrix.rust == 'nightly'
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: make
          args: build

      - name: Run CI (Minimal Supported Rust Version)
        if: matrix.rust != 'stable' && matrix.rust != 'beta' && matrix.rust != 'nightly' && matrix.os == 'ubuntu-latest'
        uses: actions-rs/cargo@v1
        with:
          command: make
          args: build
